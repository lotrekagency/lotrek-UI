/*
* Grid-layout generator via CSS Grid
* Mobile-first: starts from 4 columns, up to 12 columns.
* Every element inside the grid is automatically sized to fill all the space (mobile-first),
* to change this behavior simply specify a grid-column property on that element.
*/
@mixin grid {
  display: grid;
  align-items: center;
  grid-template-columns: repeat(4, [col-start] minmax(0, 1fr));
  
  grid-template-rows: max-content;
  grid-gap: 1rem;
  margin: 0 auto;
  padding: 0 1rem;

  & > * {
    grid-column: col-start / span 4;
    position: relative;
    z-index: 1;
    @media (min-width: 769px) {
      grid-column: col-start / span 12;
    }
  }
  @media (min-width: 769px) {
    grid-template-columns: repeat(12, [col-start] minmax(0, 1fr));
  }
}


/*
* Simple mixin to quickly build the outer container of each block
*/
@mixin container {
  background: var(--white);
  position: relative;
  overflow: hidden;
  text-align: left;
}


/*
* Button basic style
*/
@mixin btn {
  appearance: none;
  display: inline-block;
  border: 1px solid var(--black);
  background: transparent;
  text-decoration: none;
  color: var(--black);
  padding: 0.5rem 1rem;
  margin: 0.5rem 0;
  cursor: pointer;
}
.button {
  @include btn;
}


/*
* Responsive image
*/
@mixin img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  object-position: center;
}
